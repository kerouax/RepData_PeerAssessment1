set.seed(400)
NORMAL <- rnorm(10000)
UNIFORM <- runif(10000)
SKEWED <- rep(1:140, 1:140)
opar <- par() #Save original par settings. Read ?par() if you like
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
hist(NORMAL)
hist(UNIFORM)
hist(SKEWED)
par(opar) #Res
summary(NORMAL)
summary(UNIFORM)
summary(SKEWED)
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
sampl <- vector() #Create an empty vector
for(i in 1:1000) #Start a loop with 1000 rounds
sampl <- c(sampl, mean(sample(NORMAL, 3, replace=T)))
#fill sampl with sampl, and the mean of three random items from NORMAL
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 3 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 6, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 6 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 300, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 300 " )
sd(sampl)/sqrt(300)
sd(sampl)*sqrt(300)
sd(sampl)^2
x <- rnorm(100000)
y <- rnorm(100000)
z <- rep(NA, 100000) #z is created empty but with a given size.
system.time({
for (i in 1:100000) {
z[i] <- x[i] + y[i]
}
})
system.time( k <- x + y )
What statements are illustrated b
x <- rnorm(100000)
y <- rnorm(100000)
z <- rep(NA, 100000) #z is created empty but with a given size.
system.time({
for (i in 1:100000) {
z[i] <- x[i] + y[i]
}
})
system.time( k <- x + y )
set.seed(897)
ME <- matrix(rnorm(24000),nrow=1000)
colnames(ME) <- c(paste("A",1:12,sep=""),paste("B",1:12,sep=""))
length(which(ME<=0))
keep <- (apply(ME[,1:12],1,mean) > 0) & (apply(ME[,13:24],1,mean) > 0)
length(keep)
sum(keep) #make sure you understand sum() applied to logicals
head(keep)
trimmed <- apply(ME,1,function(ME){mean(ME, trim=0.05)})
View(ME)
?ttest
t.test(ME)
apply(ME[,1:12], 1, t.test)
length(which(apply(ME[,1:1000], 2, t.test))
)
apply(ME[,1:1000], 2, t.test)
apply(ME[1:1000], 2, t.test)
apply(ME[1:1000,], 2, t.test)
apply(ME$p[,1:12], 1, t.test)
apply(ME[1:1000,], 2, t.test)
apply(ME[1:1000,], 2, t.test)
1.9*0.89
2.4-1.691
2.4+1.691
pnorm(2.7)
pnorm(2.7, sd=0.89)
1 - pnorm(2.7, sd=0.89)
pnorm(-2.7, sd=0.89)
qnorm(-2.7, sd=0.89)
dnorm(-2.7, sd=0.89)
dnorm(-2.7, sd=1)
pnorm(-2.7, sd=1)
choose(20, 30)
?choose
choose(30, 20)
choose(30, 25)
choose(30, 28)
choose(30, 23)
choose(30, 27)
tprob(22.6)
qt(2.24, df=21)
pt(2.24, df=21)
1-pt(2.24, df=21)
(1-pt(2.24, df=21))*2
75/40,13
75/40.13
compare.hypothesis.tests <- function(n,y,z,k)
{
sample.size <- n
mean1 <- y
mean2 <- z
standarddev <- k
group1 <- rnorm(n, y, k)
group2 <- rnorm(n, z, k)
framedata <- cbind(group1, group2)
print(framedata)
print( list
(t.test(group1, group2, var.equal = T),
t.test(group1, group2, paired=T),
t.test(group1, group2, var.equal=T, alternative = "less"),
t.test(group1, group2, var.equal=T, alternative = "greater"),
wilcox.test(group1, group2),
wilcox.test(group1, group2, paired=T)))
}
set.seed(570)
compare.hypothesis.tests(13,90,100,10)
set.seed(570); compare.hypothesis.tests(13,90,100,10)
set.seed(570); compare.hypothesis.tests(13,90,100,10)
set.seed(570); compare.hypothesis.tests(13,90,100,10)
set.seed(896);
run<- data.frame(time=rnorm(50,mean=50,sd=10),training.method=rep(letters[1:5],each=10));
summary(aov(run$time~run$training.method))
run[1:10,1] <- run[1:10,1] - 15
summary(aov(run$time~run$training.method))
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
t.test(A,B,paired=T)
t.test(groupA,groupB,paired=T)
wilcox.test(groupA,groupB,paired=T)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
Activity <- c( 1, 4, 2, 3, 6, 5)
t.test(groupA,Activity,paired=T)
cor(groupA, Activity
)
cor(groupA, Activity, method="spearman")
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
df <- col.bind(groupA, groupB, groupC)
df <- colbind(groupA, groupB, groupC)
df <- cbind(groupA, groupB, groupC)
df
summary(aov(df))
summary(aov(df$groupA ~ df$groupB))
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
t.test(A,B,paired=T)
t.test(groupA, groupB, paired=T)
t.test(groupA, groupB, paired=F)
?power.t.test
measurements <- rnorm(40)^2
plot(measurements)
m <- sorted(measurements)
m <- sort(measurements)
plot(m)
qqplot(m)
qqplot(m, 40)
qqplot(m, 4440)
qqplot(m, 1:40)
qqplot(1:40, m)
qqplot(1:40, sort(measurements))
qqplot(y=x, sort(measurements))
qqplot(y=1:40, sort(measurements))
qqplot(1:40, sort(measurements))
plot(m)
examples(qqplot)
example(qqplot)
example(qqplot)
?rt
qqplot(sort(measurements), rt(40))
qqplot(sort(measurements), rt(40, df=1))
qqplot(sort(measurements), rt(40, df=5))
qqplot(sort(measurements), rt(40, df=2))
qqplot(sort(measurements), rt(40, df=4))
qqplot(sort(measurements), rt(40, df=3))
qqplot(sort(measurements), rt(40, df=8))
qqplot(sort(measurements), rt(40, df=5))
qqline(sort(measurements))
qqplot(sort(measurements)
)
qqplot(sort(measurements), 1:40)
?qqnorm
qqnorm(sort(measurements)
)
set.seed(12)
team <- c(rep("A",10),rep("B",10))
time <- c(rnorm(10, mean=40, sd= 10),rnorm(10, mean=40, sd= 10))
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
team
results
24+3*23
25+3*24
load("G:/My Studies/MOOCs In Progress/Data Analysis and Statistical Inference/Project/statistics-project-anes.RData")
data(sleep)
sleep
mean(sleep)
mean(sleep$extar)
mean(sleep$extra)
ave(sleep$extra)
?ave
exampel(ave)
example(ave)
library(datasets)
data(ChickWeight)
dim(ChickWeight)
head(ChickWeight)
library(reshape2)
head(ChickWeight, 20)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW
wideCW2 <- dcast(ChickWeight, Diet + Time ~ Chick, value.var = "weight")
wideCW2
wideCW2 <- dcast(ChickWeight, Chick + Time ~ Diet, value.var = "weight")
wideCW2
wideCW2 <- dcast(ChickWeight, Diet + Time ~ Chick, value.var = "weight")
wideCW2
?z.test
??z.test
?t.test
t.test(0.95, 1100, 30)
library(datasets)
data(mtcars)
head(cars)
head(mtcars)
attach(mtcars)
?attach
mean(mpg)
sd(mpg)
t.test(mpg)
t.test(mpg)$conf.int
c4 <- mtcars$mpg[mtcars$cyl == 6]
c4 <- mtcars$mpg[mtcars$cyl == 4]
c4
mtcars
length(mtcars[mtcars$cyl == 4])
length(mtcars[mtcars$cyl == 4, ])
c4
c6 <- mtcars$mpg[mtcars$cyl == 6]
length(mtcars[mtcars$cyl == 6, ])
c6 <- mtcars$mpg[mtcars$cyl == 6]
t.test(c4, c6, var.equal=TRUE)
1100 + c(-1, 1) * qt(.975, 9-1) * 30 / sqrt(9)
qt(0.025, 8)
-2 - t(0.025, df=8) * 1/3
-2 - t(0.025, 8) * 1/3
-2 - qt(0.025, 8) * 1/3
2 - qt(0.025, 8) * 1/3
2 - qt(0.025, 8) * 1/3
qt(0.025, 8)
qt(0.025, 8)/3
qt(0.025, 8)
sd <- 2*3/qt(0.025, 8)
sd
sd <- 2*3/qt(0.975, 8)
sd
sd <- 2*3/qt(0.025, 8)
sd
sd <- 2*3/qt(0.975, 8)
sd
(3-5) +c(-1, 1)*qt(0.975, 9)*sqrt((0.6^2 + 0.68^2)/2)/sqrt(10)
(3-5) + c(-1, 1)*qt(0.975, 9)*sqrt((0.6^2 + 0.68^2)/2)
(3-5) +c(-1, 1)*qt(0.975, 9)*sqrt((9*0.6^2 + 9*0.68^2)/18)/sqrt(10)
(3-5) + c(-1, 1)*qt(0.975, 9)*sqrt((0.6 + 0.68)/2)
var <- (0.60^2 + 0.68^2)/2
(3-5) + c(-1, 1)*qt(0.975, 9)*sqrt(var)/sqrt(10)
(3-5) + c(-1, 1)*qt(0.975, 9)*sqrt(var)/sqrt(20)
(3-5) + c(-1, 1)*qt(0.95, 9)*sqrt(var)/sqrt(20)
t.test(3, 5, 0.975)
(3-5) - c(-1, 1)*qt(0.95, 9)*sqrt(var)/sqrt(20)
(3-5) + c(-1, 1)*qt(0.975, 9)*sqrt(var)/sqrt(20)
(3-5) + c(-1, 1)*qt(0.975, 9)*sqrt(var)/sqrt(10)
(3-5) + c(-1, 1)*qt(0.975, 9)*sqrt(var)/sqrt(20)
(3-5) + c(-1, 1)*qt(0.975, 8)*sqrt(var)/sqrt(10)
(3-5) + c(-1, 1)*qt(0.975, 8)*sqrt(var)/sqrt(20)
(3-5) + c(-1, 1)*qt(0.975, 8)*sqrt(var)/sqrt(10)
(5-3) + c(-1, 1)*qt(0.975, 8)*sqrt(var)/sqrt(10)
(3-5) + c(-1, 1)*qt(0.975, 8)*sqrt(var)/sqrt(10)
var <- (9*0.60^2 + 9*0.68^2)/18
(3-5) + c(-1, 1)*qt(0.975, 8)*sqrt(var)/sqrt(10)
(3-5) + c(-1, 1)*qt(0.975, 8)*sqrt(var/(0.2))
(3-5) + c(-1, 1)*qt(0.975, 18)*sqrt(var/(0.2))
(3-5) + c(-1, 1)*qt(0.975, 18)*sqrt(var)/sqrt(20)
(3-5) + c(-1, 1)*qt(0.975, 18)*sqrt(var)/sqrt(0.2)
(3-5) + c(-1, 1)*qt(0.975, 18)*sqrt(var)/sqrt(20)
(4-6) + c(-1, 1)*qnorm(0.975)
(6-4) + c(-1, 1)*qnorm(0.975)
(6-4) + c(-1, 1)*qnorm(0.975)*sqrt(0.025/100 + 4/100)
(4-6) + c(-1, 1)*qnorm(0.975)*sqrt(0.025/100 + 4/100)
(6-4) + c(-1, 1)*qnorm(0.975)*sqrt(0.36/10 + 0.68^2/10)
(6-4) + c(-1, 1)*qt(0.975, 18)*sqrt(0.36/10 + 0.68^2/10)
(6-4) + c(-1, 1)*qt(0.975, 18)*sqrt(0.36/10 + 0.68^2/10)*0.64
(-3-1)*qt(0.95, 16)*1.65/sqrt(18)
(-3-1) + c(-1, 1) * qt(0.95, 16)*1.65/sqrt(18)
(-3-1) + c(-1, 1) * qt(0.05, 16)*1.65/sqrt(18)
(-3-1) + c(-1, 1) * qt(0.95, 16)*1.65/sqrt(18)
var <- (9*0.1.5^2 + 9*1.8^2)/18
var <- (9*0.1.5^2 + 9*1.8^2)/18
var <- (8*0.1.5^2 + 8*1.8^2)/16
(-3-1) + c(-1, 1) * qt(0.95, 16)*sqrt(var)*sqrt(1/9 + 1/9)
(-3-1) + c(-1, 1) * qt(0.95, 16)*sqrt(var)*sqrt(1/9 + 1/9)
pnorm(2.36)
pnorm(2.36, lower.tail = F)
sum(dbinom(0.875*200, 180, 0.9))
sum(dbinom(0:0.875*200, 180, 0.9))
sum(dbinom(1:0.875*200, 180, 0.9))
sum(dbinom(1:(0.875*200), 180, 0.9))
sum(dbinom((0.875*200):200, 180, 0.9))
1.96*0.25^2/0.0009
(1.96*0.25)^2/0.0009
(1.96)^2*0.25/0.0009
22/30
ex1 <- 0.733333*0.3
q <- (10/12+11/12+15/15++13/14+20/26)*0.3
q
q <- (10/12+11/12+15/15++13/14+20/26)/6*0.3
q
q + ex1
q <- (10/12+11/12+15/15++13/14+26/26)/6*0.3
q + ex1
0.35/0.4
q
q <- (10/12+11/12+15/15+13/14+26/26)/6*0.3
q
10/12
q <- (10/12+11/12+15/15+13/14+13/13+13/13)/6*0.3
q
q + ex1
0.3/0.4
q <- (10/12+11/12+15/15+13/14+10/13+11/13)/6*0.3
q
q + ex1
0.32/0.4
a <- c(5*3000, 2*2500, 2*2000, 4*1500, 7*1000, 25*500, 13*500, 4*1000)
b <- a^2
b
c <- sum(b)
c
d <- sqrt(c/100)
d
setwd("G:/R/Courses/JHU - 5 Reproducible Research/Peer_assesment1")
setwd("L:/R/Courses/JHU - 5 Reproducible Research/Peer_assesment1")
options(scipen = 999) # avoid using scientific notation when printing values
if (!require("dplyr")) {
install.packages("dplyr")
}
library(dplyr)
if (!require("ggplot2")) {
install.packages("ggplot2")
}
library(ggplot2)
if (!require("lubridate")) {
install.packages("lubridate")
}
library(lubridate)
if (!require("scales")) {
install.packages("scales")
}
library(scales)
activity <- read.table(unzip("./Activity_monitoring_data.zip", exdir=".", overwrite=TRUE), header=TRUE, sep=",")
head(activity)
str(activity)
activity <- tbl_df(activity)
str(activity)
total_steps_per_day <- aggregate(steps ~ date, data = activity, FUN = sum)
head(total_steps_per_day)
mean_steps_per_day <- mean(total_steps_per_day$steps, na.rm = TRUE)
median_steps_per_day <- median(total_steps_per_day$steps, na.rm = TRUE)
mean_steps_per_interval <- aggregate(activity$steps, by = list(interval = activity$interval), FUN = mean, na.rm = TRUE)
mean_steps_per_interval
names(mean_steps_per_interval) <- c("interval", "steps_per_interval")
mean_steps_per_interval
summary(mean_steps_per_interval)
ggplot(data = mean_steps_per_interval, aes(x = interval, y = steps_per_interval)) +
geom_line(color = "steelblue", size = 1.2) +
labs(title="Average Daily Activity Pattern", x = "Period of the day (interval)", y = "Number of steps taken")
max_steps_interval <- mean_steps_per_interval[which.max(mean_steps_per_interval$steps),]
max_steps_interval
NAs <- length(activity[is.na(activity)])
activity$steps[is.na(activity$steps)] <- with(activity, ave(steps, interval, FUN = function(x) round(mean(x, na.rm = TRUE), 2)))[is.na(activity$steps)]
summary(activity)
mean_steps_per_interval_new <- aggregate(activity$steps, by = list(interval = activity$interval), FUN = mean, na.rm = TRUE)
names(mean_steps_per_interval_new) <- c("interval", "steps_per_interval")
summary(mean_steps_per_interval_new)
mean_steps_per_interval_new
head(mean_steps_per_interval_new)
ggplot(data = mean_steps_per_interval_new, aes(x = interval, y = steps_per_interval)) +
geom_line(color = "thistle4", size = 1.2) +
labs(title="Average Daily Activity Pattern after populating the missing values", x = "Period of the day (interval)", y = "Number of steps taken")
total_steps_per_day_new <- aggregate(steps ~ date, data = activity, FUN = sum)
mean_steps_per_day_new <- mean(total_steps_per_day_new$steps)
median_steps_per_day_new <- median(total_steps_per_day_new$steps)
head(activity)
activity$day <- ifelse(wday(activity$date) %in% c(2:6), "weekday", "weekend")
head(activity)
str(activity)
activity$day <- as.factor(activity$day)
str(activity)
activity <- tbl_df(activity)
str(activity)
activity$interval <- as.factor(activity$interval)
str(activity)
activity$date <- as.Date(activity$date)
str(activity)
grouped_by_day_int <- group_by(activity, interval, day)
str(activity)
activity
grouped_by_day_int
mean_steps_per_day_int <- summarize(grouped_by_day_int, mean(steps))
mean_steps_per_day_int
names(mean_steps_per_day_int)[3] <- c("steps_per_interval")
mean_steps_per_day_int
mean_steps_per_day_int <- ungroup(mean_steps_per_day_int)
mean_steps_per_day_int
ggplot(mean_steps_per_day_int, aes(x = interval, y = steps_per_interval)) +
geom_line(color="violet") +
facet_grid(. ~ day) +
labs(x="Interval", y="Number of steps")
ggplot(mean_steps_per_day_int, aes(x = interval, y = steps_per_interval)) +
geom_line(color="violet") +
facet_grid(. ~ day)
ggplot(mean_steps_per_day_int, aes(x = interval, y = steps_per_interval)) + geom_point()
ggplot(mean_steps_per_day_int, aes(x = interval, y = steps_per_interval)) + geom_point() + facet_grid(. ~ day)
ggplot(mean_steps_per_day_int, aes(x = interval, y = steps_per_interval)) + geom_line() + facet_grid(. ~ day)
ggplot(mean_steps_per_day_int, aes(x = interval, y = steps_per_interval)) + geom_point() + facet_grid(. ~ day)
str(mean_steps_per_day_int)
mean_steps_per_day_int$interval <- as.integer(mean_steps_per_day_int$interval)
ggplot(mean_steps_per_day_int, aes(x = interval, y = steps_per_interval)) + geom_point() + facet_grid(. ~ day)
ggplot(mean_steps_per_day_int, aes(x = interval, y = steps_per_interval)) + geom_line() + facet_grid(. ~ day)
ggplot(mean_steps_per_day_int, aes(x = interval, y = steps_per_interval)) +
geom_line(color = "steelblue", size = 1.2) +
facet_grid(. ~ day) +
labs(title = "", x = "Interval", y = "Number of steps")
str(mean_steps_per_day_int)
activity$interval <- as.factor(activity$interval)
grouped_by_day_int <- group_by(activity, interval, day)
mean_steps_per_day_int <- summarize(grouped_by_day_int, mean(steps))
names(mean_steps_per_day_int)[3] <- c("steps_per_interval")
mean_steps_per_day_int <- ungroup(mean_steps_per_day_int)
mean_steps_per_day_int$interval <- as.character(mean_steps_per_day_int$interval)
ggplot(mean_steps_per_day_int, aes(x = interval, y = steps_per_interval)) +
geom_line(color = "steelblue", size = 1.2) +
facet_grid(. ~ day) +
labs(title = "Daily activity pattern at weekends versus weekdays", x = "Interval", y = "Number of steps")
str(mean_steps_per_day_int)
mean_steps_per_day_int$interval <- as.integer(as.character(mean_steps_per_day_int$interval))
str(mean_steps_per_day_int)
ggplot(mean_steps_per_day_int, aes(x = interval, y = steps_per_interval)) +
geom_line(color = "steelblue", size = 1.2) +
facet_grid(. ~ day) +
labs(title = "Daily activity pattern at weekends versus weekdays", x = "Interval", y = "Number of steps")
ggplot(mean_steps_per_day_int, aes(x = interval, y = steps_per_interval)) +
geom_line(color = "steelblue", size = 1.2) +
facet_grid(. ~ day) +
labs(title = "Daily activity pattern at weekdays versus weekends", x = "Interval", y = "Average daily number of steps")
getwd()
str(activity)
head(total_steps_per_day)
activity <- read.table(unzip("./Activity_monitoring_data.zip", exdir=".", overwrite=TRUE), header=TRUE, sep=",")
head(activity)
activity$date <- as.Date(activity$date)
activity <- tbl_df(activity)
activity <- tbl_df(activity)
str(activity)
print(activity)
total_steps_per_day <- aggregate(steps ~ date, data = activity, FUN = sum)
head(total_steps_per_day)
qplot(steps, data = total_steps_per_day, binwidth = 1000, fill = "salmon", main = "Histogram of Steps Taken per Day", xlab = "Steps taken per day", ylab = "Number of days (count)") + guides(fill=FALSE)
mean_steps_per_day <- mean(total_steps_per_day$steps, na.rm = TRUE)
median_steps_per_day <- median(total_steps_per_day$steps, na.rm = TRUE)
length(is.na(activity$steps))
activity$steps[is.na(activity$steps)] <- with(activity, ave(steps, interval, FUN = function(x) round(mean(x, na.rm = TRUE), 2)))[is.na(activity$steps)]
length(is.na(activity$steps))
sum(is.na(activity$steps))
length(activity[is.na(activity)])
length(activity[is.na(activity)])
activity_filled_NAs <- activity
activity_filled_NAs
activity_filled_NAs$steps[is.na(activity$steps)] <- with(activity, ave(steps, interval, FUN = function(x) round(mean(x, na.rm = TRUE), 2)))[is.na(activity$steps)]
activity_filled_NAs
activity
activity <- read.table(unzip("./Activity_monitoring_data.zip", exdir=".", overwrite=TRUE), header=TRUE, sep=",")
activity$date <- as.Date(activity$date)
activity <- tbl_df(activity)
total_steps_per_day <- aggregate(steps ~ date, data = activity, FUN = sum)
NAs <- length(activity[is.na(activity)])
activity_filled_NAs <- activity[, 1:3]
activity
activity_filled_NAs$steps[is.na(activity$steps)] <- with(activity, ave(steps, interval, FUN = function(x) round(mean(x, na.rm = TRUE), 2)))[is.na(activity$steps)]
activity
activity_filled_NAs
length(activity_filled_NAs[is.na(activity_filled_NAs)])
mean_steps_per_interval_new <- aggregate(activity_filled_NAs$steps, by = list(interval = activity_filled_NAs$interval), FUN = mean, na.rm = TRUE)
names(mean_steps_per_interval_new) <- c("interval", "steps_per_interval")
head(mean_steps_per_interval_new)
ggplot(data = mean_steps_per_interval_new, aes(x = interval, y = steps_per_interval)) +
geom_line(color = "mediumpurple1", size = 1.2) +
labs(title="Average Daily Activity Pattern after populating the missing values", x = "Period of the day (interval)", y = "Number of steps taken")
knit("PA_1.Rmd")
knitr("PA_1.Rmd")
library("knitr", lib.loc="C:/Program Files/R/R-3.1.2/library")
knit("PA_1.Rmd")
getwd()
setwd("L:/R/Courses/JHU - 5 Reproducible Research/Peer_assesment_1")
knit("PA_1.Rmd")
knit("PA_1.Rmd")
